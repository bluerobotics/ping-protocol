// C++ implementation of the Blue Robotics 'Ping' binary message protocol

//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT
//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!

#pragma once

#ifdef QT_CORE_LIB
#include <QObject>
#endif

#include "ping_message.h"

/// {{class_info.name}} objects provide a wrapper over vector
/// for convenient access and packing of field data
///
/// These files are generated by the ping_generator.py
/// script found in this directory

namespace {{generator.capitalize(class_info.name)}}Namespace {
#ifdef QT_CORE_LIB
    Q_NAMESPACE
#endif
    enum {{class_info.name}}_id {
{% for message in messages['all_msgs'] %}
        {{generator.capitalize(message)}} = {{messages['all_msgs'][message].id}},
{% endfor %}
    };
#ifdef QT_CORE_LIB
    Q_ENUM_NS({{class_info.name}}_id)
#endif
};

{% for message in messages['all_msgs'] %}
{% set total_payload = generator.calc_payload(messages['all_msgs'][message].payload) %}
class {{class_info.name}}{{message_type}}_{{message}} : public ping_message
{
public:
    {{class_info.name}}{{message_type}}_{{message}}(const ping_message& msg) : ping_message { msg } {}
    {{class_info.name}}{{message_type}}_{{message}}(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    {{class_info.name}}{{message_type}}_{{message}}(
{%- for payload in messages['all_msgs'][message].payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype -%}
            {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length
{% else -%}
            uint16_t {{payload.name}}_length
{%- endif %}
{% endif %}
{% endfor %})
        : ping_message { static_cast<uint16_t>({{8 + total_payload + 2}}
{%- for payload in messages['all_msgs'][message].payload %}
{% if generator.is_vector(payload.type) %}
 + {{payload.name}}_length
{%- endif %}
{% endfor %}) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = {{total_payload}}
{%- for payload in messages['all_msgs'][message].payload %}
{% if generator.is_vector(payload.type) %}
 + {{payload.name}}_length
{%- endif %}
{% endfor %}; // payload size
        (uint16_t&)msgData[4] = {{messages['all_msgs'][message].id}}; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

{% set byte = namespace(offset=0, func='') %}
{% if messages['all_msgs'][message].payload %}
{% for payload in messages['all_msgs'][message].payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype %}
    {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length() const { {{generator.get_type_string(payload.vector.sizetype, name='d')}}; memcpy(&d, (payload_data({{byte.offset}})), {{generator.get_c_size(payload.vector.sizetype)}}); return d; };
    //TODO do this in constructor (const)
    void set_{{payload.name}}_length(const {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length) { memcpy((payload_data({{byte.offset}})), &{{payload.name}}_length, {{generator.get_c_size(payload.vector.sizetype)}});};
{% set byte.offset = byte.offset + generator.get_c_size(payload.vector.sizetype) %}
{% endif %}
    {{generator.get_type_string(payload.vector.datatype)}}* {{payload.name}}() const { return ({{generator.get_type_string(payload.vector.datatype)}}*)(payload_data({{byte.offset}})); }
    void set_{{payload.name}}_at(const uint16_t i, const {{generator.get_type_string(payload.vector.datatype)}} data) { memcpy((payload_data({{byte.offset}} + i)), &data, 1); }
{% else %}
    {{generator.get_type_string(payload.type)}} {{payload.name}}() const { {{generator.get_type_string(payload.type, name='d')}}; memcpy(&d, (payload_data({{byte.offset}})), {{generator.get_c_size(payload.type)}}); return d; };
    void set_{{payload.name}}(const {{generator.get_type_string(payload.type)}} {{payload.name}}) { memcpy((payload_data({{byte.offset}})), &{{payload.name}}, {{generator.get_c_size(payload.type)}});};
{% set byte.offset = byte.offset + generator.get_c_size(payload.type) %}
{% endif %}
{% endfor %}
{% endif %}
};

{% endfor %}
