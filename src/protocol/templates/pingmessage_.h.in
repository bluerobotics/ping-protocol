// Ping message c++ implementation
// This file was originally generated by ping_generator.py

#pragma once

#include <string.h>

#include "pingmessage.h"

{% set message_type = _actual_message_type %}
{% for message in messages[message_type] %}
{% set total_payload = calc_payload(messages[message_type][message].payload) %}
class {{subclass_info.name}}{{message_type}}_{{message}} : public {{class_info.name}}
{
public:
    {{subclass_info.name}}{{message_type}}_{{message}}(QByteArray buf) : {{class_info.name}}(buf) {}
    {{subclass_info.name}}{{message_type}}_{{message}}(PingMessage& msg) : {{class_info.name}}(msg) {}
    {{subclass_info.name}}{{message_type}}_{{message}}() {
        msgData = std::vector<uint8_t>(8 + {{total_payload}} + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = {{total_payload}}; // payload size
        (uint16_t&)msgData[4] = {{messages[message_type][message].id}}; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

{% set byte = namespace(offset=0) %}
{% if messages[message_type][message].payload %}
{% for payload in messages[message_type][message].payload %}
{% if is_vector(payload.type) %}
    {{get_type_string(payload.type, pointer=True)}} {{payload.name}}() { return (msgData.data() + 8 + {{byte.offset}}); }
    void set_{{payload.name}}_at(uint16_t i, uint8_t data) { memcpy((msgData.data() + 8 + {{byte.offset}} + i), &data, 1); }
{% else %}
    {{get_type_string(payload.type)}} {{payload.name}}() { {{get_type_string(payload.type, name='d')}}; memcpy(&d, (msgData.data() + 8 + {{byte.offset}}), {{get_c_size(payload.type)}}); return d; };
{% endif %}
    void set_{{payload.name}}({{get_type_string(payload.type)}} {{payload.name}}) { memcpy((msgData.data() + 8 + {{byte.offset}}), &{{payload.name}}, {{get_c_size(payload.type)}});};

{% set byte.offset = byte.offset + get_c_size(payload.type) %}
{% endfor %}
{% endif %}
};

{% endfor %}