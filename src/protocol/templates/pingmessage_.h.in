// Ping message c++ implementation
// This file was originally generated by ping_generator.py

#pragma once

#include "pingmessage.h"

{% set message_type = _actual_message_type %}
{% for message in messages[message_type] %}
{% set total_payload = calc_payload(messages[message_type][message].payload) %}
class {{subclass_info.name}}{{message_type}}_{{message}} : public {{class_info.name}}
{
public:
    {{subclass_info.name}}{{message_type}}_{{message}}(PingMessage& msg) : {{class_info.name}}(msg) {}
    {{subclass_info.name}}{{message_type}}_{{message}}() {
        _bufferLength = {{8 + total_payload + 2}};
        msgData = (uint8_t*)malloc(sizeof(uint8_t) * _bufferLength);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = {{total_payload}}; // payload size
        (uint16_t&)msgData[4] = {{messages[message_type][message].id}}; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

{% set byte = namespace(offset=0, func='') %}
{% if messages[message_type][message].payload %}
{% for payload in messages[message_type][message].payload %}
{% if is_var_size(payload.type) %}{# ex type = 'u8[var]' #}
    {{get_type_string(payload.type, pointer=True)}} {{payload.name}}() { return ({{get_type_string(payload.type, pointer=True)}})(payload_data({{byte.offset}})); }
{% set byte.func = '{0} + {1}'.format(byte.func, get_c_size(payload.type)) %}
{% else %}
{% if is_vector(payload.type) %}
    {{get_type_string(payload.type, pointer=True)}} {{payload.name}}() { return (payload_data({{byte.offset}})); }
    void set_{{payload.name}}_at(uint16_t i, uint8_t data) { memcpy((payload_data({{byte.offset}} + i)), &data, 1); }
{% else %}
    {{get_type_string(payload.type)}} {{payload.name}}() { {{get_type_string(payload.type, name='d')}}; memcpy(&d, (payload_data({{byte.offset}})), {{get_c_size(payload.type)}}); return d; };
    void set_{{payload.name}}({{get_type_string(payload.type)}} {{payload.name}}) { memcpy((payload_data({{byte.offset}})), &{{payload.name}}, {{get_c_size(payload.type)}});};
{% endif %}
{% set byte.offset = byte.offset + get_c_size(payload.type) %}
{% endif %}
{% endfor %}
{% endif %}
};

{% endfor %}
