// Ping message c++ implementation
// This file was originally generated by ping_generator.py

#pragma once

#include "pingmessage.h"

class ping_msg_gen_new_data : public PingMessage // ID 112
{
public:
    ping_msg_gen_new_data(QByteArray buf) : PingMessage(buf) {}
    ping_msg_gen_new_data(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_gen_new_data() {
        msgData = std::vector<uint8_t>(8 + 1 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 1; // payload size
        (uint16_t&)msgData[4] = 112; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t    is_new_data()                                      { uint8_t d; memcpy(&d, (msgData.data() + 8 + 0), 1); return d; }
    void       set_is_new_data(uint8_t is_new_data)               { memcpy((msgData.data() + 8 + 0), &is_new_data, 1); }
};


class ping_msg_gen_goto_bootloader : public PingMessage // ID 0x109
{
public:
    ping_msg_gen_goto_bootloader(QByteArray buf) : PingMessage(buf) {}
    ping_msg_gen_goto_bootloader(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_gen_goto_bootloader() {
        msgData = std::vector<uint8_t>(8 + 0 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 0; // payload size
        (uint16_t&)msgData[4] = 0x109; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

};


class ping_msg_gen_version : public PingMessage // ID 101
{
public:
    ping_msg_gen_version(QByteArray buf) : PingMessage(buf) {}
    ping_msg_gen_version(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_gen_version() {
        msgData = std::vector<uint8_t>(8 + 6 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 6; // payload size
        (uint16_t&)msgData[4] = 101; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t    device_type()                                      { uint8_t d; memcpy(&d, (msgData.data() + 8 + 0), 1); return d; }
    uint8_t    device_model()                                     { uint8_t d; memcpy(&d, (msgData.data() + 8 + 1), 1); return d; }
    uint16_t   fw_version_major()                                 { uint16_t d; memcpy(&d, (msgData.data() + 8 + 2), 2); return d; }
    uint16_t   fw_version_minor()                                 { uint16_t d; memcpy(&d, (msgData.data() + 8 + 4), 2); return d; }
    void       set_device_type(uint8_t device_type)               { memcpy((msgData.data() + 8 + 0), &device_type, 1); }
    void       set_device_model(uint8_t device_model)             { memcpy((msgData.data() + 8 + 1), &device_model, 1); }
    void       set_fw_version_major(uint16_t fw_version_major)    { memcpy((msgData.data() + 8 + 2), &fw_version_major, 2); }
    void       set_fw_version_minor(uint16_t fw_version_minor)    { memcpy((msgData.data() + 8 + 4), &fw_version_minor, 2); }
};


class ping_msg_gen_cmd_request : public PingMessage // ID 120
{
public:
    ping_msg_gen_cmd_request(QByteArray buf) : PingMessage(buf) {}
    ping_msg_gen_cmd_request(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_gen_cmd_request() {
        msgData = std::vector<uint8_t>(8 + 2 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 2; // payload size
        (uint16_t&)msgData[4] = 120; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t   request_id()                                       { uint16_t d; memcpy(&d, (msgData.data() + 8 + 0), 2); return d; }
    void       set_request_id(uint16_t request_id)                { memcpy((msgData.data() + 8 + 0), &request_id, 2); }
};


class ping_msg_gen_device_id : public PingMessage // ID 110
{
public:
    ping_msg_gen_device_id(QByteArray buf) : PingMessage(buf) {}
    ping_msg_gen_device_id(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_gen_device_id() {
        msgData = std::vector<uint8_t>(8 + 1 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 1; // payload size
        (uint16_t&)msgData[4] = 110; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t    id()                                               { uint8_t d; memcpy(&d, (msgData.data() + 8 + 0), 1); return d; }
    void       set_id(uint8_t id)                                 { memcpy((msgData.data() + 8 + 0), &id, 1); }
};

