// Ping message c++ implementation
// This file was originally generated by ping_generator.py

#pragma once

#include "pingmessage.h"

class ping_msg_es_profile : public PingMessage // ID 1102
{
public:
    ping_msg_es_profile(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_profile(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_profile() {
        msgData = std::vector<uint8_t>(8 + 225 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 225; // payload size
        (uint16_t&)msgData[4] = 1102; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t   distance()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 0), 4); return d; }
    uint8_t    confidence()                                       { uint8_t d; memcpy(&d, (msgData.data() + 8 + 4), 1); return d; }
    uint16_t   pulse_usec()                                       { uint16_t d; memcpy(&d, (msgData.data() + 8 + 5), 2); return d; }
    uint32_t   ping_number()                                      { uint32_t d; memcpy(&d, (msgData.data() + 8 + 7), 4); return d; }
    uint32_t   start_mm()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 11), 4); return d; }
    uint32_t   length_mm()                                        { uint32_t d; memcpy(&d, (msgData.data() + 8 + 15), 4); return d; }
    uint32_t   gain_index()                                       { uint32_t d; memcpy(&d, (msgData.data() + 8 + 19), 4); return d; }
    uint16_t   num_points()                                       { uint16_t d; memcpy(&d, (msgData.data() + 8 + 23), 2); return d; }
    uint8_t*   data()                                             { return (msgData.data() + 8 + 25); }
    void       set_distance(uint32_t distance)                    { memcpy((msgData.data() + 8 + 0), &distance, 4); }
    void       set_confidence(uint8_t confidence)                 { memcpy((msgData.data() + 8 + 4), &confidence, 1); }
    void       set_pulse_usec(uint16_t pulse_usec)                { memcpy((msgData.data() + 8 + 5), &pulse_usec, 2); }
    void       set_ping_number(uint32_t ping_number)              { memcpy((msgData.data() + 8 + 7), &ping_number, 4); }
    void       set_start_mm(uint32_t start_mm)                    { memcpy((msgData.data() + 8 + 11), &start_mm, 4); }
    void       set_length_mm(uint32_t length_mm)                  { memcpy((msgData.data() + 8 + 15), &length_mm, 4); }
    void       set_gain_index(uint32_t gain_index)                { memcpy((msgData.data() + 8 + 19), &gain_index, 4); }
    void       set_num_points(uint16_t num_points)                { memcpy((msgData.data() + 8 + 23), &num_points, 2); }
    void       set_data_at(uint16_t i, uint8_t data)              { memcpy((msgData.data() + 8 + 25 + i), &data, 1); }
};


class ping_msg_es_distance : public PingMessage // ID 1101
{
public:
    ping_msg_es_distance(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_distance(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_distance() {
        msgData = std::vector<uint8_t>(8 + 23 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 23; // payload size
        (uint16_t&)msgData[4] = 1101; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t   distance()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 0), 4); return d; }
    uint8_t    confidence()                                       { uint8_t d; memcpy(&d, (msgData.data() + 8 + 4), 1); return d; }
    uint16_t   pulse_usec()                                       { uint16_t d; memcpy(&d, (msgData.data() + 8 + 5), 2); return d; }
    uint32_t   ping_number()                                      { uint32_t d; memcpy(&d, (msgData.data() + 8 + 7), 4); return d; }
    uint32_t   start_mm()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 11), 4); return d; }
    uint32_t   length_mm()                                        { uint32_t d; memcpy(&d, (msgData.data() + 8 + 15), 4); return d; }
    uint32_t   gain_index()                                       { uint32_t d; memcpy(&d, (msgData.data() + 8 + 19), 4); return d; }
    void       set_distance(uint32_t distance)                    { memcpy((msgData.data() + 8 + 0), &distance, 4); }
    void       set_confidence(uint8_t confidence)                 { memcpy((msgData.data() + 8 + 4), &confidence, 1); }
    void       set_pulse_usec(uint16_t pulse_usec)                { memcpy((msgData.data() + 8 + 5), &pulse_usec, 2); }
    void       set_ping_number(uint32_t ping_number)              { memcpy((msgData.data() + 8 + 7), &ping_number, 4); }
    void       set_start_mm(uint32_t start_mm)                    { memcpy((msgData.data() + 8 + 11), &start_mm, 4); }
    void       set_length_mm(uint32_t length_mm)                  { memcpy((msgData.data() + 8 + 15), &length_mm, 4); }
    void       set_gain_index(uint32_t gain_index)                { memcpy((msgData.data() + 8 + 19), &gain_index, 4); }
};


class ping_msg_es_distance_simple : public PingMessage // ID 1100
{
public:
    ping_msg_es_distance_simple(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_distance_simple(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_distance_simple() {
        msgData = std::vector<uint8_t>(8 + 5 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 5; // payload size
        (uint16_t&)msgData[4] = 1100; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t   distance()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 0), 4); return d; }
    uint8_t    confidence()                                       { uint8_t d; memcpy(&d, (msgData.data() + 8 + 4), 1); return d; }
    void       set_distance(uint32_t distance)                    { memcpy((msgData.data() + 8 + 0), &distance, 4); }
    void       set_confidence(uint8_t confidence)                 { memcpy((msgData.data() + 8 + 4), &confidence, 1); }
};


class ping_msg_es_rate : public PingMessage // ID 1112
{
public:
    ping_msg_es_rate(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_rate(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_rate() {
        msgData = std::vector<uint8_t>(8 + 2 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 2; // payload size
        (uint16_t&)msgData[4] = 1112; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t   msec_per_ping()                                    { uint16_t d; memcpy(&d, (msgData.data() + 8 + 0), 2); return d; }
    void       set_msec_per_ping(uint16_t msec_per_ping)          { memcpy((msgData.data() + 8 + 0), &msec_per_ping, 2); }
};


class ping_msg_es_pulse : public PingMessage // ID 1114
{
public:
    ping_msg_es_pulse(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_pulse(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_pulse() {
        msgData = std::vector<uint8_t>(8 + 2 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 2; // payload size
        (uint16_t&)msgData[4] = 1114; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t   pulse_usec()                                       { uint16_t d; memcpy(&d, (msgData.data() + 8 + 0), 2); return d; }
    void       set_pulse_usec(uint16_t pulse_usec)                { memcpy((msgData.data() + 8 + 0), &pulse_usec, 2); }
};


class ping_msg_es_range : public PingMessage // ID 1110
{
public:
    ping_msg_es_range(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_range(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_range() {
        msgData = std::vector<uint8_t>(8 + 8 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 8; // payload size
        (uint16_t&)msgData[4] = 1110; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t   start_mm()                                         { uint32_t d; memcpy(&d, (msgData.data() + 8 + 0), 4); return d; }
    uint32_t   length_mm()                                        { uint32_t d; memcpy(&d, (msgData.data() + 8 + 4), 4); return d; }
    void       set_start_mm(uint32_t start_mm)                    { memcpy((msgData.data() + 8 + 0), &start_mm, 4); }
    void       set_length_mm(uint32_t length_mm)                  { memcpy((msgData.data() + 8 + 4), &length_mm, 4); }
};


class ping_msg_es_mode : public PingMessage // ID 1111
{
public:
    ping_msg_es_mode(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_mode(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_mode() {
        msgData = std::vector<uint8_t>(8 + 1 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 1; // payload size
        (uint16_t&)msgData[4] = 1111; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t    auto_manual()                                      { uint8_t d; memcpy(&d, (msgData.data() + 8 + 0), 1); return d; }
    void       set_auto_manual(uint8_t auto_manual)               { memcpy((msgData.data() + 8 + 0), &auto_manual, 1); }
};


class ping_msg_es_gain : public PingMessage // ID 1113
{
public:
    ping_msg_es_gain(QByteArray buf) : PingMessage(buf) {}
    ping_msg_es_gain(PingMessage& msg) : PingMessage(msg) {}
    ping_msg_es_gain() {
        msgData = std::vector<uint8_t>(8 + 1 + 2, 0);
        msgData[0] = 'B';
        msgData[1] = 'R';
        (uint16_t&)msgData[2] = 1; // payload size
        (uint16_t&)msgData[4] = 1113; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t    gain_index()                                       { uint8_t d; memcpy(&d, (msgData.data() + 8 + 0), 1); return d; }
    void       set_gain_index(uint8_t gain_index)                 { memcpy((msgData.data() + 8 + 0), &gain_index, 1); }
};

